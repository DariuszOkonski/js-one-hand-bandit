!function(n){var c={};function r(t){if(c[t])return c[t].exports;var l=c[t]={i:t,l:!1,exports:{}};return n[t].call(l.exports,l,l.exports,r),l.l=!0,l.exports}r.m=n,r.c=c,r.d=function(n,c,t){r.o(n,c)||Object.defineProperty(n,c,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,c){if(1&c&&(n=r(n)),8&c)return n;if(4&c&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&c&&"string"!=typeof n)for(var l in n)r.d(t,l,function(c){return n[c]}.bind(null,l));return t},r.n=function(n){var c=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(c,"a",c),c},r.o=function(n,c){return Object.prototype.hasOwnProperty.call(n,c)},r.p="",r(r.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/Color.js\nclass Color {\r\n  constructor(setColor) {\r\n    this.color = setColor;\r\n  }\r\n\r\n  changeColor(setColor) {\r\n    this.color = setColor;\r\n  }\r\n\r\n  getColor() {\r\n    return this.color;\r\n  }\r\n}\r\n\r\n/* harmony default export */ var js_Color = (Color);\n// CONCATENATED MODULE: ./src/js/Colors.js\n\r\n\r\nclass Colors_Colors {\r\n  constructor() {\r\n    this.colors = this.setColors();\r\n  }\r\n\r\n  setColors() {\r\n    const colors = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      colors.push(new js_Color('grey'));\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  changeColors(arr) {\r\n    for (let i = 0; i < arr.length; i++) {\r\n      this.colors[i].changeColor(arr[i]);\r\n    }\r\n  }\r\n\r\n  getColorsTable() {\r\n    const colorsTable = [this.colors[0].color, this.colors[1].color, this.colors[2].color];\r\n    return colorsTable;\r\n  }\r\n}\r\n\r\n/* harmony default export */ var js_Colors = (Colors_Colors);\n// CONCATENATED MODULE: ./src/js/Wallet.js\nclass Wallet {\r\n  constructor(startAmount) {\r\n    this.amount = startAmount;\r\n  }\r\n\r\n  getAmount() {\r\n    return this.amount;\r\n  }\r\n\r\n  addToAmount(value) {\r\n    this.amount += value;\r\n  }\r\n\r\n  removeFromAmount(value) {\r\n    this.amount -= value;\r\n  }\r\n\r\n  checkWallet(amount) {\r\n    return (this.amount >= amount);\r\n  }\r\n}\r\n\r\n/* harmony default export */ var js_Wallet = (Wallet);\n// CONCATENATED MODULE: ./src/js/Statistics.js\nclass Statistics {\r\n  constructor() {\r\n    this.currentScore = '';\r\n    this.games = 0;\r\n    this.wonGames = 0;\r\n    this.lostGames = 0;\r\n  }\r\n\r\n  addCurrentScore(value) {\r\n    this.currentScore = value;\r\n  }\r\n\r\n  addGames() {\r\n    this.games++;\r\n  }\r\n\r\n  addWonGames() {\r\n    this.wonGames++;\r\n  }\r\n\r\n  addLostGames() {\r\n    this.lostGames++;\r\n  }\r\n}\r\n\r\n/* harmony default export */ var js_Statistics = (Statistics);\n// CONCATENATED MODULE: ./src/js/Engine.js\n\r\n\r\n\r\n\r\nconst START_AMOUNT = 200;\r\nclass Engine_Engine {\r\n  constructor() {\r\n    this.colors = new js_Colors();\r\n    this.wallet = new js_Wallet(START_AMOUNT);\r\n    this.statistics = new js_Statistics();\r\n    this.bid = 0;\r\n\r\n    this.btnRoll = document.getElementById('btn-roll').addEventListener('click', (e) => this.rollEngine(e));\r\n    this.btnReset = document.getElementById('btn-reset').addEventListener('click', (e) => this.reset(e));\r\n\r\n    this.moneyInput = document.getElementById('money-input');\r\n    this.cardColors = document.querySelectorAll('.card-deck .card');\r\n    this.walletDiv = document.getElementById('wallet');\r\n    this.currentScoreSpan = document.getElementById('current-score');\r\n    this.gamesSpan = document.getElementById('games');\r\n    this.wonGamesSpan = document.getElementById('won-games');\r\n    this.lostGamesSpan = document.getElementById('lost-games');\r\n\r\n    this.render();\r\n  }\r\n\r\n  // render methods\r\n  render() {\r\n    this.renderCardColors();\r\n    this.renderWallet();\r\n    this.renderStatistics();\r\n  }\r\n\r\n  renderCardColors() {\r\n    this.cardColors.forEach((card, i) => {\r\n      card.style.backgroundColor = this.colors.colors[i].getColor();\r\n    });\r\n  }\r\n\r\n  renderWallet() {\r\n    this.walletDiv.textContent = this.wallet.getAmount();\r\n  }\r\n\r\n  renderStatistics() {\r\n    this.currentScoreSpan.textContent = this.statistics.currentScore;\r\n    this.gamesSpan.textContent = this.statistics.games;\r\n    this.wonGamesSpan.textContent = this.statistics.wonGames;\r\n    this.lostGamesSpan.textContent = this.statistics.lostGames;\r\n  }\r\n\r\n\r\n  ///click event methods\r\n  rollEngine(e) {\r\n    if (this.wallet.getAmount() === 0) {\r\n      alert('Your wallet is empty, This is OVER');\r\n      this.moneyInput.value = '0';\r\n      return;\r\n    }\r\n\r\n    this.bid = this.getMoney(e);\r\n    if (this.bid === undefined)\r\n      return;\r\n\r\n    this.wallet.removeFromAmount(this.bid);\r\n\r\n    this.checkCurrentPlay(this.colors.getColorsTable(), this.bid)\r\n\r\n    this.render();\r\n  }\r\n\r\n  reset(e) {\r\n    this.colors = new js_Colors();\r\n    this.wallet = new js_Wallet(START_AMOUNT);\r\n    this.statistics = new js_Statistics();\r\n    this.bid = 0;\r\n\r\n    this.render();\r\n  }\r\n\r\n  // additional methods\r\n  checkCurrentPlay(drawArray, amount) {\r\n    let rate = 0;\r\n    let wins = 0;\r\n\r\n\r\n    if (drawArray[0] === 'red' && drawArray[1] === 'red' && drawArray[2] === 'red') {\r\n      rate = 1.5;\r\n      wins++;\r\n    } else if (drawArray[0] === 'green' && drawArray[1] === 'green' && drawArray[2] === 'green') {\r\n      rate = 2;\r\n      wins++;\r\n    } else if (drawArray[0] === 'blue' && drawArray[1] === 'blue' && drawArray[2] === 'blue') {\r\n      rate = 2.5\r\n      wins++;\r\n    } else if (drawArray[0] !== drawArray[1] && drawArray[1] !== drawArray[2] && drawArray[2] !== drawArray[0]) {\r\n      rate = 3;\r\n      wins++;\r\n    } else {\r\n      rate = 0;\r\n    }\r\n\r\n    this.updateStatistics(amount, rate, wins);\r\n\r\n    this.render();\r\n  }\r\n\r\n  updateStatistics(amount, rate, wins) {\r\n    let walletValue = 0;\r\n    if (wins > 0) {\r\n      walletValue = Math.round(amount * rate) + amount;\r\n      this.statistics.currentScore = `You won $${walletValue}`;\r\n      this.statistics.wonGames++;\r\n    } else {\r\n      walletValue = 0;\r\n      this.statistics.currentScore = `You lost $${amount}`;\r\n      this.statistics.lostGames++;\r\n    }\r\n    this.statistics.games++;\r\n    this.wallet.addToAmount(walletValue);\r\n  }\r\n\r\n  getMoney(e) {\r\n    let amount = Number(this.moneyInput.value);\r\n\r\n    if (amount < 0 || amount > this.wallet.getAmount()) {\r\n      amount = 0;\r\n    }\r\n\r\n    if (amount === 0) {\r\n      alert('You have to bet first');\r\n      this.moneyInput.value = 0;\r\n      return\r\n    }\r\n\r\n    this.setRandomColors();\r\n    this.moneyInput.value = 0;\r\n    return Math.floor(amount);\r\n  }\r\n\r\n  setRandomColors() {\r\n    const colors = ['red', 'green', 'blue'];\r\n    const randomColors = [];\r\n\r\n    for (let i = 0; i < colors.length; i++) {\r\n      randomColors.push(colors[Math.floor(Math.random() * colors.length)]);\r\n    }\r\n\r\n    this.colors.changeColors(randomColors);\r\n  }\r\n}\r\n\r\n\r\n\r\n/* harmony default export */ var js_Engine = (Engine_Engine);\n// CONCATENATED MODULE: ./src/js/main.js\n\n\n// service worker registration - remove if you're not going to use it\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker.register('serviceworker.js').then(function (registration) {\n      // Registration was successful\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\n    }, function (err) {\n      // registration failed :(\n      console.log('ServiceWorker registration failed: ', err);\n    });\n  });\n}\n\n// place your code below\n\n\n\nnew js_Engine();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);